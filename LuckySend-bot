import os
import logging
import random
import json
from decimal import Decimal
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ======
BOT_TOKEN = os.getenv("BOT_TOKEN")        # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –í–∞—à Telegram ID –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
DATA_FILE = os.getenv("DATA_FILE", "data.json")  # –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ====== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ======
def load_data() -> dict:
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"participants": [], "total_amount": "0.00"}


def save_data(data: dict):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("ü§ë –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='participate')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–æ–Ω–∞—Ç–æ–≤.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Å—É–º–º—É –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == 'participate':
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):"
        )


async def manual_donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text.isdigit():
        amount = int(text)
        data = load_data()
        data['participants'].append({'user_id': update.effective_user.id, 'amount': amount})
        total = Decimal(data.get('total_amount', '0.00')) + Decimal(amount)
        data['total_amount'] = str(total)
        save_data(data)
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {amount}‚Ç¥! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total}‚Ç¥")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    total = Decimal(data.get('total_amount', '0.00'))
    participants = len({p['user_id'] for p in data.get('participants', [])})
    await update.message.reply_text(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total}‚Ç¥ –æ—Ç {participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")


async def draw(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    data = load_data()
    if not data.get('participants'):
        await update.message.reply_text("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return
    winner = random.choice(data['participants'])
    prize = data.get('total_amount', '0.00')
    save_data({'participants': [], 'total_amount': '0.00'})
    try:
        await context.bot.send_message(winner['user_id'], f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize}‚Ç¥! üéâ")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
    await update.message.reply_text(f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner['user_id']}, –ø—Ä–∏–∑: {prize}‚Ç¥")


# ====== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ======
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, manual_donate))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(CommandHandler('draw', draw))

    logger.info("Starting bot...")
    app.run_polling()
