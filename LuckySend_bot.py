import os
import logging
import random
import json
from decimal import Decimal
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ======
API_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram Payments –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –ê–π–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞
DATA_FILE = os.getenv("DATA_FILE", "data.json")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

if not API_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
# PAYMENT_PROVIDER_TOKEN –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ====== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ======
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"participants": [], "total_amount": "0.00"}


def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ======
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ë –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")
    )
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–æ–Ω–∞—Ç–æ–≤.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–æ–Ω–∞—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å."
    )
    await message.answer(text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == "participate")
async def participate_cb(callback: types.CallbackQuery):
    if PAYMENT_PROVIDER_TOKEN:
        # —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å send_invoice
        prices = [types.LabeledPrice(label="–î–æ–Ω–∞—Ç –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à", amount=5000)]
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title="–î–æ–Ω–∞—Ç –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à",
            description="–°—É–º–º–∞ –ø–æ–π–¥–µ—Ç –≤ –æ–±—â–∏–π —Ñ–æ–Ω–¥ –º–µ—Å—è—á–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.",
            payload="donation_payload",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="UAH",
            prices=prices,
        )
    else:
        await bot.send_message(
            callback.from_user.id,
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):"
        )



@dp.pre_checkout_query_handler(lambda q: True)
async def pre_checkout(pre_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_q.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def payment_success(message: types.Message):
    data = load_data()
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    uah = amount / 100
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    data["participants"].append({"user_id": user_id, "amount": uah})
    total = Decimal(data.get("total_amount", "0.00")) + Decimal(uah)
    data["total_amount"] = str(total)
    save_data(data)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {uah:.2f}‚Ç¥! –¢—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")


@dp.message_handler(lambda m: m.text and m.text.isdigit())
async def manual_donate(message: types.Message):
    uah = int(message.text)
    data = load_data()
    data["participants"].append({"user_id": message.from_user.id, "amount": uah})
    total = Decimal(data.get("total_amount", "0.00")) + Decimal(uah)
    data["total_amount"] = str(total)
    save_data(data)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {uah}‚Ç¥! –¢—ã –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")