import os
import logging
import random
import json
from decimal import Decimal
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

# ====== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ======
API_TOKEN = os.getenv("BOT_TOKEN")        # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # –í–∞—à Telegram ID –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
DATA_FILE = os.getenv("DATA_FILE", "data.json")  # –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ====== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ======
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {"participants": [], "total_amount": "0.00"}


def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("ü§ë –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–æ–Ω–∞—Ç–æ–≤.\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Å—É–º–º—É –∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "participate")
async def participate_cb(callback: types.CallbackQuery):
    await bot.send_message(
        callback.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):"
    )

@dp.message_handler(lambda m: m.text and m.text.isdigit())
async def manual_donate(message: types.Message):
    amount_uah = int(message.text)
    data = load_data()
    data["participants"].append({"user_id": message.from_user.id, "amount": amount_uah})
    total = Decimal(data.get("total_amount", "0.00")) + Decimal(amount_uah)
    data["total_amount"] = str(total)
    save_data(data)
    await message.reply(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {amount_uah}‚Ç¥! –°—É–º–º–∞ –≤—Å–µ—Ö –¥–æ–Ω–∞—Ç–æ–≤: {total}‚Ç¥")

@dp.message_handler(commands=["status"])
async def status_handler(message: types.Message):
    data = load_data()
    total = Decimal(data.get("total_amount", "0.00"))
    participants = len({p['user_id'] for p in data.get("participants", [])})
    await message.reply(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {total}‚Ç¥ –æ—Ç {participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

@dp.message_handler(commands=["draw"])
async def draw_handler(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    data = load_data()
    if not data.get("participants"):  # –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        await message.reply("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
        return
    winner = random.choice(data["participants"])
    winner_id = winner["user_id"]
    prize = data.get("total_amount", "0.00")
    # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    save_data({"participants": [], "total_amount": "0.00"})
    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ
    await bot.send_message(winner_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize}‚Ç¥! üéâ")
    await message.reply(f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_id}, –ø—Ä–∏–∑: {prize}‚Ç¥")

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
